#pragma checksum "/Users/Ruby/Downloads/Final/Advanture_Game/Advanture_Game.Client/Pages/Game.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "1a3a19d7caf394c53cf89022282b85ca8e48cb59"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Advanture_Game.Client.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Blazor;
    using Microsoft.AspNetCore.Blazor.Components;
    using System.Net.Http;
    using Microsoft.AspNetCore.Blazor.Layouts;
    using Microsoft.AspNetCore.Blazor.Routing;
    using Microsoft.JSInterop;
    using Advanture_Game.Client;
    using Advanture_Game.Client.Shared;
    using Advanture_Game.Shared;
    [Microsoft.AspNetCore.Blazor.Layouts.LayoutAttribute(typeof(MainLayout))]

    [Microsoft.AspNetCore.Blazor.Components.RouteAttribute("/Game")]
    public class Game : Microsoft.AspNetCore.Blazor.Components.BlazorComponent
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeBuilder builder)
        {
        }
        #pragma warning restore 1998
#line 85 "/Users/Ruby/Downloads/Final/Advanture_Game/Advanture_Game.Client/Pages/Game.cshtml"
            
    GameModel[] gameModels;
    Step[] steps;
    HashSet<int> set;
    Step pre;
    int difficulty;
    GameModel gm;
    protected override async Task OnInitAsync()
    {
        gameModels = await Http.GetJsonAsync<GameModel[]>("api/game");
        steps = await Http.GetJsonAsync<Step[]>("api/step");
        set = new HashSet<Int32>();
        foreach (var s in steps)
        {
            int id = s.x * s.difficulty + s.y;
            Console.WriteLine(id);
            set.Add(id);

        }
        pre = steps[steps.Length - 1];
        difficulty = gameModels[gameModels.Length - 1].difficulty;
        gm = gameModels[gameModels.Length - 1];
    }

    public void move(bool b)
    {
        pre = steps[steps.Length - 1];
        int index = b ? pre.x * difficulty + pre.y + 1 : (pre.x + 1) * difficulty + pre.y;
        Step step = new Step();
        step.x = index / difficulty;
        step.y = index % difficulty;
        step.remain = pre.remain + gm.gridList[index];
        step.difficulty = difficulty;
        if ( step.remain > 0)
        {
            step.alive = true;
        }
        else
        {
            step.alive = false;
        }
        Http.PostJsonAsync<Step>("api/step", step);
    }








#line default
#line hidden
        [global::Microsoft.AspNetCore.Blazor.Components.InjectAttribute] private HttpClient Http { get; set; }
    }
}
#pragma warning restore 1591
